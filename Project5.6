public class CircularArrayQueue<T> implements QueueADT<T>
{
private final int DEFAULT_CAPACITY = 100;
private int front, rear, number;
private T[] queue;
/**
* Creates an empty queue using the default capacity.
*/
public CircularArrayQueue()
{
front = rear = number = 0;
queue = (T[]) (new Object[DEFAULT_CAPACITY]);
}
/**
* Creates an empty queue using the specified capacity.
*
* @param initialCapacity the integer representation of the initial
* size of the circular array queue
*/
public CircularArrayQueue (int initialCapacity)
{
front = rear = number = 0;
queue = ( (T[])(new Object[initialCapacity]) );
}
/**
* Adds the specified element to the rear of this queue, expanding
* the capacity of the queue array if necessary.
*
* @param element the element to add to the rear of the queue
*/
public void enqueue (T element)
{
if (size() == queue.length)
expandCapacity();
queue[rear] = element;
rear = (rear+1) % queue.length;
number++;
}
/**
* Creates a new array to store the contents of this queue with
* twice the capacity of the old one.
*/
public void expandCapacity()
{
T[] larger = (T[])(new Object[queue.length *2]);
for(int scan=0; scan < number; scan++)
{
larger[scan] = queue[front];
front=(front+1) % queue.length;
}
front = 0;
rear = number;
queue = larger;
}
public T dequeue() throws EmptyCollectionException
{
if (isEmpty())
throw new EmptyCollectionException (“queue”);
T result = queue[front];
queue[front] = null;
front = (front+1) % queue.length;
number--;
return result;
}
